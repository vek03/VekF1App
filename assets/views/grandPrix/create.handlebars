<style>
    .container {
        background-color: #1e1e1e;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    }

    h1 {
        text-align: center;
        margin-bottom: 20px;
        color: #FFD700;
    }

    label {
        font-size: 14px;
        margin-bottom: 5px;
        display: block;
        color: #FFD700;
    }

    input,
    select {
        width: 100%;
        padding: 10px;
        margin-bottom: 15px;
        border: 1px solid #FFD700;
        border-radius: 5px;
        background-color: #2c2c2c;
        color: #FFD700;
        font-size: 14px;
    }

    input::placeholder {
        color: #999;
    }

    .button {
        width: 100%;
        padding: 10px;
        border: none;
        border-radius: 5px;
        background-color: #FFD700;
        color: #121212;
        font-size: 16px;
        cursor: pointer;
        transition: background-color 0.3s ease;
        margin-bottom: 20px;
    }
    .button.excluir{
        background-color: rgb(163, 12, 12);
    }
    .button.excluir:hover{
        background-color: #d30606;
    }
    .button.salvar:hover {
        background-color: #e6b800;
    }

    .podio-list-container {
        display: grid;
        grid-template-columns: repeat(2, 1fr); /* Default: 3 columns */
        gap: 20px;
        max-width: 1000px;
        margin: auto;
    }

    .podio-item {
        margin-bottom: 10px;
        border: 1px solid #ced4da;
        border-radius: 5px;
        display: flex;
        align-items: center;
        cursor: grab;
        position: relative;
        overflow: hidden;
    }

    .podio-item.dragging {
        opacity: 0.5;
        background: #e9ecef;
    }

    .position-box {
        width: 120px;
        height: 100%;
        position: absolute;
        left: 0;
        top: 0;
        background-color: transparent;
        clip-path: polygon(0 0, 100% 0, 80% 100%, 0 100%);
        display: flex;
        justify-content: center;
        align-items: center;
        font-weight: bold;
        color: white;
        z-index: 1;
    }

    .logo-box {
        width: 70px;
        height: 100%;
        position: absolute;
        right: 0;
        top: 0;
        background-color: transparent;
        clip-path: polygon(20% 0, 100000% 100%, 0 100%, 0 100%);
        display: flex;
        justify-content: center;
        align-items: center;
        font-weight: bold;
        color: white;
        z-index: 1;
    }

    .gold {
        background-color: gold;
    }

    .silver {
        background-color: silver;
        color: black;
    }

    .bronze {
        background-color: #cd7f32;
    }

    .gray {
        background-color: gray;
    }

    .info-box {
        flex-grow: 1;
        padding: 10px 20px;
        margin-left: 100px;
        border-radius: 5px;
        color: white;
        text-align: left;
        margin-left: -50px;
        padding-left: 180px;
    }

    @media (max-width: 1024px) {
        .podio-list-container {
            grid-template-columns: repeat(2, 1fr); /* 2 columns on medium screens */
        }

        .info-box {
            padding-left: 150px;
        }

        .logo-box {
            width: 80px;
        }

        .position-box {
            width: 80px;
        }
    }

    @media (max-width: 768px) {
        .podio-list-container {
            grid-template-columns: 1fr; /* 1 column on small screens */
        }

        .info-box {
            padding-left: 130px;
        }

        .logo-box {
            width: 60px;
        }

        .position-box {
            width: 60px;
        }
    }
</style>

<div class="container">
    <div class="col-md-12">
        <h1>{{{ title }}}</h1>
    </div>

    <div class="col-md-12">
        <form class="" action="/grandPrix/store" method="post">
            <div class="row">
                <div class="col-md-6">
                    <label for="nome">Nome</label>
                    <input type="text" id="nome" name="nome" placeholder="Digite o nome" required>
                </div>

                <div class="col-md-6">
                    <label for="pais">País</label>
                    <input type="text" id="pais" name="pais" placeholder="Digite o país" required>
                </div>

                <div class="col-md-6">
                    <label for="cidade">Cidade</label>
                    <input type="text" id="cidade" name="cidade" placeholder="Digite a cidade" required>
                </div>

                <div class="col-md-6">
                    <label for="pista">Pista</label>
                    <input type="text" id="pista" name="pista" placeholder="Digite a pista" required>
                </div>
                
                <div class="col-md-6">
                    <label for="data_ini">Data Início</label>
                    <input type="date" id="data_inicio" name="data_inicio" required>
                </div>

                <div class="col-md-6">
                    <label for="data_fim">Data Fim</label>
                    <input type="date" id="data_fim" name="data_fim" required>
                </div>
                
                <div class="col-md-12">
                    <h1>Pódio</h1>
                    <div class=" pb-20 podio-list-container" id="podioList"></div>
                </div>

                <input type="hidden" name="podio" id="podio">
                
                <div class="col-md-12 pt-10">
                    <button class="button" style="margin-top: 50px;" class="editar" type="submit">Salvar</button>
                </div>
            </div>
        </form>
    </div>
</div>

<script>
    var podio = [];

    function getPodio(gpId = null) {
        fetch('/grandPrix/getPodio', 
            {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    gpId: gpId
                })
            }
        ).then(response => response.json())
        .then(data => {
            console.log(data);
            podio = data.data;
            renderPodio();
        });
    }
    
    const podioa = [
        { nome: "Max Verstappen", equipe: { nome: "Redbull", imagem: "redBull.svg", corPrimaria: "#1e41ff", corSecundaria: "#ffffff" } },
        { nome: "Sergio Pérez", equipe: { nome: "Red Bull", imagem: "redBull.svg", corPrimaria: "#1e41ff", corSecundaria: "#ffffff" } },
        { nome: "Lewis Hamilton", equipe: { nome: "Mercedes", imagem: "mercedes.svg", corPrimaria: "#00d2be", corSecundaria: "#ffffff" } },
        { nome: "George Russell", equipe: { nome: "Mercedes", imagem: "mercedes.svg", corPrimaria: "#00d2be", corSecundaria: "#ffffff" } },
        { nome: "Charles Leclerc", equipe: { nome: "Ferrari", imagem: "ferrari.svg", corPrimaria: "#f1d100", corSecundaria: "#000000" } },
        { nome: "Carlos Sainz", equipe: { nome: "Ferrari", imagem: "ferrari.svg", corPrimaria: "#f1d100", corSecundaria: "#000000" } },
        { nome: "Lando Norris", equipe: { nome: "McLaren", imagem: "mclaren.svg", corPrimaria: "#ff8700", corSecundaria: "#ffffff" } },
        { nome: "Oscar Piastri", equipe: { nome: "McLaren", imagem: "mclaren.svg", corPrimaria: "#ff8700", corSecundaria: "#ffffff" } },
        { nome: "Esteban Ocon", equipe: { nome: "Alpine", imagem: "alpine.svg", corPrimaria: "#2673E2", corSecundaria: "#005e7c" } },
        { nome: "Pierre Gasly", equipe: { nome: "Alpine", imagem: "alpine.svg", corPrimaria: "#2673E2", corSecundaria: "#005e7c" } },
        { nome: "Fernando Alonso", equipe: { nome: "Aston Martin", imagem: "astonMartin.svg", corPrimaria: "#037a68", corSecundaria: "#ffffff" } },
        { nome: "Lance Stroll", equipe: { nome: "Aston Martin", imagem: "astonMartin.svg", corPrimaria: "#037a68", corSecundaria: "#ffffff" } },
        { nome: "Alexander Albon", equipe: { nome: "Williams", imagem: "williams.svg", corPrimaria: "#00A0DE", corSecundaria: "#1e1e1e" } },
        { nome: "Logan Sargeant", equipe: { nome: "Williams", imagem: "williams.svg", corPrimaria: "#00A0DE", corSecundaria: "#1e1e1e" } },
        { nome: "Valtteri Bottas", equipe: { nome: "Alfa Romeo", imagem: "alfaRomeo.svg", corPrimaria: "#9d9c8e", corSecundaria: "#9e1b32" } },
        { nome: "Zhou Guanyu", equipe: { nome: "Alfa Romeo", imagem: "alfaRomeo.svg", corPrimaria: "#9d9c8e", corSecundaria: "#9e1b32" } },
        { nome: "Yuki Tsunoda", equipe: { nome: "AlphaTauri", imagem: "alphaTauri.svg", corPrimaria: "#1f77b4", corSecundaria: "#ffffff" } },
        { nome: "Nyck de Vries", equipe: { nome: "AlphaTauri", imagem: "alphaTauri.svg", corPrimaria: "#1f77b4", corSecundaria: "#ffffff" } },
        { nome: "Kevin Magnussen", equipe: { nome: "Haas", imagem: "haas.svg", corPrimaria: "#E6002B", corSecundaria: "#000000" } },
        { nome: "Nico Hülkenberg", equipe: { nome: "Haas", imagem: "haas.svg", corPrimaria: "#E6002B", corSecundaria: "#000000" } }
    ];

    const podioList = document.getElementById("podioList");
    let draggedElement = null;
    let isTouch = false;

    function renderPodio() {
        document.getElementById("podio").value = JSON.stringify(podio);
        podioList.innerHTML = "";
        podio.forEach((podio, index) => {
            const div = document.createElement("div");
            div.classList.add("podio-item");
            div.draggable = true;

            const positionClass = index === 0 ? "gold" : index === 1 ? "silver" : index === 2 ? "bronze" : "gray";

            div.innerHTML = `
                    <div class="position-box ${positionClass}">${index + 1}</div>
                    <div class="info-box" style="background-color: ${podio.equipe.corPrimaria}; color: ${podio.equipe.corSecundaria};">
                        <strong>${podio.nome}</strong><br>
                        <span class="equipe-name">${podio.equipe.nome}</span>
                    </div>
                    <div class="logo-box">
                        <img src="/public/img/marcas/${podio.equipe.imagem}" alt="${podio.equipe.nome}" style="max-height: 50px; max-width: 60px;">
                    </div>
                `;

            div.addEventListener("dragstart", (e) => {
                isTouch = false;
                draggedElement = div;
                div.classList.add("dragging");
            });

            div.addEventListener("dragend", () => {
                div.classList.remove("dragging");
                draggedElement = null;
                updatePositions();
            });

            div.addEventListener("dragover", (e) => {
                e.preventDefault();
                if (isTouch) return;
                const afterElement = getDragAfterElement(podioList, e.clientY);
                if (afterElement == null) {
                    podioList.appendChild(draggedElement);
                } else {
                    podioList.insertBefore(draggedElement, afterElement);
                }
            });

            div.addEventListener("touchstart", (e) => {
                isTouch = true;
                draggedElement = div;
                div.classList.add("dragging");
                e.preventDefault();
            });

            div.addEventListener("touchend", () => {
                div.classList.remove("dragging");
                draggedElement = null;
                updatePositions();
            });

            div.addEventListener("touchmove", (e) => {
                if (!isTouch) return;
                const touch = e.touches[0];
                const afterElement = getDragAfterElement(podioList, touch.clientY);
                if (afterElement == null) {
                    podioList.appendChild(draggedElement);
                } else {
                    podioList.insertBefore(draggedElement, afterElement);
                }
                e.preventDefault();
            });

            podioList.appendChild(div);
        });
    }

    function getDragAfterElement(container, y) {
        const draggableElements = [...container.querySelectorAll(".podio-item:not(.dragging)")];
        return draggableElements.reduce(
            (closest, child) => {
                const box = child.getBoundingClientRect();
                const offset = y - box.top - box.height / 2;
                if (offset < 0 && offset > closest.offset) {
                    return { offset: offset, element: child };
                } else {
                    return closest;
                }
            },
            { offset: Number.NEGATIVE_INFINITY }
        ).element;
    }

    function updatePositions() {
        const newOrder = [...podioList.querySelectorAll(".podio-item")].map((item) => {
            const name = item.querySelector(".info-box strong").textContent.trim();
            return podio.find(podio => podio.nome === name);
        });
        podio.splice(0, podio.length, ...newOrder);
        renderPodio();
    }

    podioList.addEventListener("drop", () => {
        updatePositions();
    });

    getPodio();
</script>
